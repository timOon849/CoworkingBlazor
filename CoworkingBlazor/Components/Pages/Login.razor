@page "/login"

@using System.ComponentModel.DataAnnotations
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Authentication
@using System
@using System.Timers
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using System.IdentityModel.Tokens.Jwt
@rendermode InteractiveServer
@inject ILogger<Login> Logger
@inject IHttpClientFactory HttpClientFactory
@inject IDispatcher Dispatcher
@inject IState<AuthState> _authState
@inject NavigationManager Navigation
@inject ILocalStorageService LocalStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
<Fluxor.Blazor.Web.StoreInitializer />


<style>
    /* Основные настройки */
body {
    margin: 0;
    padding: 0;
    font-family: Arial, sans-serif;
    background-color: #f8f9fa;
}

/* Центрирование контента */
.centered-content {
    display: flex;
    justify-content: center;
    align-items: center;
    min-height: 100vh;
}

/* Формы */
.form-control {
    width: 100%;
    padding: 0.5rem;
    margin: 0.5rem 0;
    border: 1px solid #ced4da;
    border-radius: 0.25rem;
}

.form-group {
    margin-bottom: 1rem;
}

/* Кнопки */
.btn {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 0.25rem;
    cursor: pointer;
    transition: all 0.3s ease;
}

.btn-primary {
    background-color: #0d6efd;
    color: white;
}

.btn-primary:hover {
    background-color: #0b5ed7;
}

.btn-danger {
    background-color: #dc3545;
    color: white;
}

.btn-danger:hover {
    background-color: #bd2130;
}

/* Таблицы */
.table {
    width: 100%;
    border-collapse: collapse;
    margin: 1rem 0;
}

.table thead th {
    background-color: #343a40;
    color: white;
    padding: 0.75rem;
}

.table td, .table th {
    border: 1px solid #dee2e6;
    padding: 0.75rem;
}

/* Заголовки */
h1 {
    color: #212529;
    font-weight: bold;
    text-align: center;
    margin-bottom: 2rem;
}

/* Валидация */
.text-danger {
    color: #dc3545;
    font-size: 0.875em;
    margin-top: 0.25rem;
}
</style>
<PageTitle>Log in</PageTitle>

<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="col-md-4">
        <section>
            <EditForm Model="@loginRequest" OnValidSubmit="HandleLogin" FormName="LoginForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="email">Почта:</label>
        <Microsoft.AspNetCore.Components.Forms.InputText id="email" class="form-control" @bind-Value="loginRequest.Username" />
        <ValidationMessage For="@(() => loginRequest.Username)" />
    </div>

    <div class="form-group">
        <label for="password">Пароль:</label>
        <Microsoft.AspNetCore.Components.Forms.InputText id="password" type="password" class="form-control" @bind-Value="loginRequest.Password" />
        <ValidationMessage For="@(() => loginRequest.Password)" />
    </div>

    <button type="submit" class="btn-primary" disabled="@isLoading">
        @if (isLoading)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            <span class="sr-only">Загрузка...</span>
        }
        else
        {
            <span>Войти</span>
        }
    </button>
</EditForm>

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert">
                    @errorMessage
                </div>
            }

            <div class="mt-3" style="text-align: center;">
                <NavLink class="register-link" href="/Registration">Зарегистрироваться</NavLink>
            </div>
        </section>
    </div>
</div>

@code {
    private LoginUserRequest loginRequest = new LoginUserRequest();
    private string errorMessage;
    private bool isLoading;
    private bool isInitialized = false;
    private string currentUserRole;



    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !isInitialized)
        {
            var token = _authState.Value.JwtToken;

            if (!string.IsNullOrEmpty(token) && IsTokenValid(token))
            {
                Navigation.NavigateTo("/");
            }

            isInitialized = true;
            StateHasChanged();
        }
    }

    private async Task HandleLogin()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var httpClient = HttpClientFactory.CreateClient("UnauthorizedClient");
            Console.WriteLine("Sending login request...");
            var response = await httpClient.PostAsJsonAsync("api/Auth/login", loginRequest);

            if (response.IsSuccessStatusCode)
            {
                Console.WriteLine("Login successful, reading response...");
                var result = await response.Content.ReadFromJsonAsync<LoginResponse>();
                if (result != null && !string.IsNullOrEmpty(result.Token))
                {
                    Console.WriteLine("Token received, storing in local storage...");
                    Dispatcher.Dispatch(new SetJwtTokenAction(result.Token));
                    Console.WriteLine("Notifying authentication state provider...");
                    currentUserRole = GetUserRoleFromToken(result.Token);
                    Console.WriteLine("Waiting 2 seconds before navigation...");
                    await Task.Delay(2000);
                    Console.WriteLine(result.Token);
                    Navigation.NavigateTo("/weather");
            }
            else
            {
                errorMessage = "Токен отсутствует в ответе.";
            }
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"API returned error: {errorContent}");
        }
    }
    catch (Exception ex)
    {
        errorMessage = "Произошла ошибка при авторизации.";
        Console.WriteLine(ex.ToString());
    }
    finally
    {
        isLoading = false;
    }
}

    private bool IsTokenValid(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);
            return jwtToken.ValidTo > DateTime.UtcNow;
        }
        catch
        {
            return false;
        }
    }

    private string GetUserRoleFromToken(string token)
    {
        try
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            var role = jwtToken.Claims
                .FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value;

            return role;
        }
        catch (Exception ex)
        {
            Console.WriteLine("Ошибка при чтении роли из токена: " + ex.Message);
            return null;
        }
    }

    public class LoginUserRequest
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }

    public class LoginResponse
    {
        public string Token { get; set; }
    }
}
