@page "/Registration"

@using System.ComponentModel.DataAnnotations
@using System
@using System.Timers
@using System.IdentityModel.Tokens.Jwt
@using System.Security.Claims
@using CoworkingBlazor.ApiRequest



@inject ILogger<Login> Logger
@inject NavigationManager Navigation
@inject IHttpClientFactory HttpClientFactory
@rendermode InteractiveServer

<style>
    /* Основные настройки */
    body {
        margin: 0;
        padding: 0;
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
    }

    /* Центрирование контента */
    .centered-content {
        display: flex;
        justify-content: center;
        align-items: center;
        min-height: 100vh;
    }

    /* Формы */
    .form-control {
        width: 100%;
        padding: 0.5rem;
        margin: 0.5rem 0;
        border: 1px solid #ced4da;
        border-radius: 0.75rem; /*увеличен до 0.75rem*/
        transition: border-color 0.3s ease; /*добавил анимацию*/
    }

        .form-control:focus {
            border-color: #86b7fe;
            box-shadow: 0 0 0 0.2rem rgba(12, 105, 227, 0.25);
        }

    /* Кнопки */
    .btn {
        padding: 0.5rem 1.5rem; /* увеличил горизонтальный padding */
        border: none;
        border-radius: 0.75rem; /* закругление 0.75rem */
        cursor: pointer;
        transition: all 0.3s ease;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05); /* тень для глубины */
    }

        .btn:hover {
            transform: translateY(-1px);
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }

    .btn-primary {
        background-color: #0d6efd;
        color: white;
    }

        .btn-primary:hover {
            background-color: #0b5ed7;
        }

    .btn-danger {
        background-color: #dc3545;
        color: white;
    }

        .btn-danger:hover {
            background-color: #bd2130;
        }

    /* Таблицы */
    .table {
        width: 100%;
        border-collapse: collapse;
        margin: 1rem 0;
    }

        .table thead th {
            background-color: #343a40;
            color: white;
            padding: 0.75rem;
            border-radius: 0.5rem 0.5rem 0 0; /* закругление для заголовков таблицы */
        }

        .table td, .table th {
            border: 1px solid #dee2e6;
            padding: 0.75rem;
        }

    /* Заголовки */
    h1 {
        color: #212529;
        font-weight: bold;
        text-align: center;
        margin-bottom: 2rem;
        border-radius: 0.5rem; /* закругление для заголовков */
        padding: 1rem;
        background-color: #e9ecef; /* фон для заголовков */
        box-shadow: 0 2px 4px rgba(0,0,0,0.1); /* тень */
    }

    /* Валидация */
    .text-danger {
        color: #dc3545;
        font-size: 0.875em;
        margin-top: 0.25rem;
    }

    /* Дополнительные улучшения */
    input[type="date"] {
        border-radius: 0.75rem; /* для полей даты */
    }

    /* Эффекты наведения */
    .form-control:hover {
        border-color: #adb5bd;
    }

    .form-control:disabled {
        background-color: #e9ecef;
        border-color: #ced4da;
    }
</style>

<PageTitle>Регистрация</PageTitle>

<!-- Центрирование контента -->
<div class="d-flex justify-content-center align-items-center vh-100">
    <div class="col-md-4">
        <section>
            <EditForm Model="@registerModel" OnValidSubmit="HandleRegistration" FormName="RegForm">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Почта:</label>
                    <Microsoft.AspNetCore.Components.Forms.InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
                    <ValidationMessage For="@(() => registerModel.Email)" />
                </div>

                <div class="form-group">
                    <label for="name">Имя:</label>
                    <Microsoft.AspNetCore.Components.Forms.InputText id="name" class="form-control" @bind-Value="registerModel.Name" />
                    <ValidationMessage For="@(() => registerModel.Name)" />
                </div>

                <div class="form-group">
                    <label for="description">Описание:</label>
                    <Microsoft.AspNetCore.Components.Forms.InputText id="description" class="form-control" @bind-Value="registerModel.Description" />
                    <ValidationMessage For="@(() => registerModel.Description)" />
                </div>

                <div class="form-group">
                    <label for="password">Пароль:</label>
                    <Microsoft.AspNetCore.Components.Forms.InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
                    <ValidationMessage For="@(() => registerModel.Password)" />
                </div>

                <button type="submit" class="btn-primary" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span class="sr-only">Загрузка...</span>
                    }
                    else
                    {
                        <span>Зарегистрироваться</span>
                    }
                </button>
            </EditForm>

            <div class="mt-3" style="text-align: center;">
                <NavLink class="register-link" href="/">Назад</NavLink>
            </div>
        </section>
    </div>
</div>

@code {
    private RegisterModel registerModel = new RegisterModel();
    private string errorMessage;
    private bool isLoading;

    private async Task HandleRegistration()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var httpClient = HttpClientFactory.CreateClient("UnauthorizedClient");

            var response = await httpClient.PostAsJsonAsync("api/Auth/register", registerModel);

            if (response.IsSuccessStatusCode)
            {
                Navigation.NavigateTo("/login");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Ошибка: {errorContent}";
            }
        }
        catch (Exception e)
        {
            errorMessage = "Произошла ошибка при регистрации.";
        }
        finally
        {
            isLoading = false;
        }
    }
}